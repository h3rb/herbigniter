<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/**
 * HerbIgniter
 *
 * An open source application development framework for PHP 4.3.2 or newer
 *
 * @package		HerbIgniter
 * @author		Herb
 * @copyright		Copyright (c) 2009 Gudagi
 * @license		http://gudagi.net/herbigniter/HI_user_guide/license.html
 * @link		http://gudagi.net/herbigniter/
 * @since		Version 1.0
 * @filesource
 */

// ------------------------------------------------------------------------

/**
 * HerbIgniter AJAX (Requires the Page object)
 *
 * @package		HerbIgniter
 * @subpackage		Helpers
 * @category		Javascript, AJAX
 * @author		Herb
 * @link		http://gudagi.net/herbigniter/HI_user_guide/helpers/js_helper.html
 */

// ------------------------------------------------------------------------

// Generates a unique alphabetic name for a JS object.
if(!function_exists('unique_jsid'))
{
	if ( !isset($jsids) ) $jsids=0;
	function unique_jsid( $prefix='' ) {
		global $jsids;
		$alphas = array( 0=>'a', 1=>'b', 2=>'c', 3=>'d', 4=>'e', 5=>'f', 6=>'g', 7=>'h', 8=>'i', 9=>'j' );
		$decimal=10;
		$str=$jsids.'';
		for ( $digit=0; $digit<$decimal; $digit++ )
 		 str_replace($digit.'',$alphas[$digit],$str);
		$jsids++;
		return $prefix.$str;
	}
}

// Returns the last Javascript Function Chunk (JSID) generated by this system.
if(!function_exists('get_jsid'))
{
	function get_jsid( $prefix='' ) {
		global $jsids;
		$ours = $jsids-1;
		$alphas = array( 0=>'a', 1=>'b', 2=>'c', 3=>'d', 4=>'e', 5=>'f', 6=>'g', 7=>'h', 8=>'i', 9=>'j' );
		$decimal=10;
		$str=$ours.'';
		for ( $digit=0; $digit<$decimal; $digit++ )
 		 str_replace($digit.'',$alphas[$digit],$str);
		return $prefix.$str;
	}
}

// Generates a unique alphabetic name for an AJAX object.
if(!function_exists('unique_ajid'))
{
	if ( !isset($ajids) ) $ajids=0;
	function unique_ajid( $prefix='' ) {
		global $ajids;
		$alphas = array( 0=>'k', 1=>'l', 2=>'m', 3=>'n', 4=>'o', 5=>'p', 6=>'q', 7=>'r', 8=>'s', 9=>'t' );
		$decimal=10;
		$str=$ajids.'';
		for ( $digit=0; $digit<$decimal; $digit++ )
 		 str_replace($digit.'',$alphas[$digit],$str);
		$ajids++;
		return $prefix.$str;
	}
}

// Returns the last ajid generated by this system.
if(!function_exists('get_ajid'))
{
	function get_ajid( $prefix='' ) {
		global $ajids;
		$ours = $ajids-1;
		$alphas = array( 0=>'k', 1=>'l', 2=>'m', 3=>'n', 4=>'o', 5=>'p', 6=>'q', 7=>'r', 8=>'s', 9=>'t' );
		$decimal=10;
		$str=$ours.'';
		for ( $digit=0; $digit<$decimal; $digit++ )
 		 str_replace($digit.'',$alphas[$digit],$str);
		return $prefix.$str;
	}
}

// Returns the last ajid generated by this system.
if(!function_exists('get_ajax'))
{
	function get_ajax( $prefix='' ) {
		return $prefix.get_ajid().$prefix.get_jsid();
	}
}

// Returns the last ajid generated by this system.
if(!function_exists('unique_ajax'))
{
	function unique_ajax( $prefix='' ) {
		return $prefix.unique_ajid().$prefix.unique_jsid();
	}
}

if(!function_exists('init_ajax'))
{
  // Firefox, Opera 8.0+, Safari, and IE
  function init_ajax( ) {
	return '
<script type="text/javascript">
 function GetXmlHttpObject() { var A=null; try  {  A=new XMLHttpRequest(); } catch (e) { /*IE*/ try { A=new ActiveXObject("Msxml2.XMLHTTP"); } catch (e) { A=new ActiveXObject("Microsoft.XMLHTTP"); } } return A; }
</script>';
  }
}


// puts javascript into your head section, returns the DIV code 
// -> use ajax_nested_div()
// params: $someurl, $id, $loading
// Called in the (head section of HTML), returns the code that creates the associated DIV
// you may trigger the population of the div with javascript:id_()
// and it will be populated with $someurl
// optionally, you may provide html as the loading screen in the $loading variable
if(!function_exists('ajax_div'))
{
 function ajax_div( $page, $id, $someurl, $loading, $type='div' ) {
 $page->append_head( '
<script type="text/javascript"> 
 function ' . $id . '_sC(http) { if (http.readyState==4 || http.readyState=="complete") { document.getElementById("' . $id . '").innerHTML=http.responseText; } }
 function ' . $id . '_gxho() { var A=null; try  { A=new XMLHttpRequest(); } catch (e)  { /*IE*/ try { A=new ActiveXObject("Msxml2.XMLHTTP"); } catch (e) { A=new ActiveXObject("Microsoft.XMLHTTP"); } } return A; }	   
 function ' . $id . '_() { http=' . $id . '_gxho(); if (http==null) {  alert ("Browser does not support HTTP Request, so clicking the button you clicked won\'t work.\nPlease try something else."); return; } var url="' . $someurl . '"; var params = ""; document.getElementById("' . $id . '").innerHTML="' . str_replace("\"", '\\\"', str_replace("'", "\\'", $loading)) . '"; http.open("POST", url, true); http.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); http.setRequestHeader("Content-length", params.length); http.setRequestHeader("Connection", "close"); http.onreadystatechange = function() { ' . $id . '_sC(http); } http.send(params); }
</script>' );
   $page->append_body( '<'.$type.' style="display:inline;" height="0" width="100%" id="' . $id . '"></'.$type.'>' );
 }
}

// Called once during init to establish the functionality.
// This is to create a nested navigational object, where the original link can populate a div,
// which is not possible with ajax_div()
// Implement
// ajid=AJAX identifier to make this unique.
// Jsid=unique javascript identifier used in naming the functions
// Triggered-by Usage:  <a href="javascript:dbid_id('url variable &id value','div id','url')">some link</a>
if(!function_exists('ajax_element'))
{
function ajax_element_init( $url, $loading="Loading...Please wait.", $type='div', $ajid='', $jsid='', $params='' ) {
 if ( strlen($ajid) == 0 ) $ajid=unique_ajid();
 if ( strlen($jsid) == 0 ) $jsid=unique_ajid();
 return
 '
<script type="text/javascript"> 
 function ' . $ajid . $jsid . '_sC(divid,http) {   if (http.readyState==4 || http.readyState=="complete") { document.getElementById(divid).innerHTML=http.responseText; }    }
 function ' . $ajid . $jsid . '_gxho() { var xmlHttp=null; try  { xmlHttp=new XMLHttpRequest(); } catch (e)  { /*IE*/ try { xmlHttp=new ActiveXObject("Msxml2.XMLHTTP"); } catch (e) { xmlHttp=new ActiveXObject("Microsoft.XMLHTTP"); } } return xmlHttp; }
 function ' . $ajid . $jsid . '() { http=' . $ajid . $jsid . '_gxho(); if (http==null) { alert ("Browser does not support HTTP Request, so clicking the button you clicked won\'t work.\nPlease try something else."); return; } var url ="'.$url.'"; var params = "'.$params.'"; document.getElementById("'.$ajid.'").innerHTML="' . str_replace("\"", '\\\"', str_replace("'", "\\'", $loading)) . '"; http.open("POST", url, true); http.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); http.setRequestHeader("Content-length", params.length); http.setRequestHeader("Connection", "close"); http.onreadystatechange = function() { ' . $ajid . $jsid . '_sC("'.$ajid.'",http); } http.send(params); }
</script>';
 }
}

// Used in conjunction with ajax_element_init to establish the div, or can be done manually,
//
if(!function_exists('ajax_element'))
{
 function ajax_element( $id='', $type = 'div' ) {
   if ( strlen($id) == 0 ) $id = get_ajid();
   return '<'.$type.' style="display:inline;" height="0" width="100%" id="' . $id . '"></'.$type.'>';
 }
}

// Used in conjunction with ajax_element_init to establish the div, or can be done manually,
//
if(!function_exists('ajax_element_link'))
{
 function ajax_element_link(  $content, $id='' ) {
   if ( strlen($id) == 0 ) $id = get_ajax();
   return '<a href="#" onclick="javascript:'.$id.'()">'.$content.'</a>';
 }
}
   
   /*
    * Create an AJAX flipper region, with optional support for being in a <form> tag (defined outside the flipper call)
    * id: unique identifier, used to name the scripts, id the div and set mode
    * link: html that appears in the link which leads to result
    * result: resulting form or component including cancel link; use ' not "
    * title: the title of the link (mouseover text)
    * action: submit link name   (default "press enter") "" = suppress feature
    * cancel: name that should appear on the link that reverts the region
    * form: name/id of the form  (default "the_form")
    * modal: provides hidden mode element set to flipper id when true
    */
   
if(!function_exists('flipper'))
{
   function flipper( $page, $link, $result, $title="", $action="press enter", $cancel="cancel", $form="the_form", $modal=false ) {
      $jsid = unique_jsid();
      $ajid = unique_ajid(); // unused, but called to keep jsid and ajid even.
	     // flip the script
      $page->append_head( '<script type="text/javascript" language="javascript"> function ' . $id . '() { document.getElementById(\'' . $id . '\').innerHTML="'
         . ( $modal ? "<input type='hidden' name='mode' id='mode' value='" . $id . "'>" : "" ) . $result
         . '<a href=\'javascript:revert_' . $id . '()\'>' . $cancel . '</a>' . ( $action != "" ? " or " : "" ) 
	 . ( $action != "press enter" ? "<a href='javascript:document.forms." . $form . ".submit();'>" . $action . "</a>" : $action ) . '"; } '
	 . ' function revert_' . $id . '() { document.getElementById(\'' . $id . '\').innerHTML="<a href=\'javascript:' . $id . '()\' title=\'' . $title . '\'>'
	 . $link . '</a>"; } </script> )' );
	     // write the actual div + originating link
      $page->append_body( '<div id="' . $id . '"><a href="javascript:' . $id . '()" target="_self" title=\'' . $title . '\'>' . $link . '</a></div>' );
   }
}

   /*
    * Create an AJAX controlled div region that contains a scripted AJAX call to toggle the status of a flag on a table
    * and update the region to show resulting value
    * id: unique identifier, used to name scripts, id the div and set mode
    * table: the table we are modifying
    * field: the field we are modifying
    * flag: the flag we are toggling
    * on: what is shown if this item is "on"
    * off: what is show if this item is "off"
    * title: link title
    * modal: provides hidden mode element set to flipper id when true
    */
if ( function_exists('flag') && function_exists('find_id') ) {
if(!function_exists('toggler'))
{
   function toggler( $page, $table, $field, $flag, $on, $off, $title="", $modal=false ) {
      $id = get_ajax();      
      $value = find_id($table,$field);
      if ( is_null($value) ) { return "<p>Invalid $table:$field"; }
      $value = flag($value[$field]);
      
	     // flip the script
      $output= '<script type="text/javascript" language="javascript"> function ' . $id . '() { document.getElementById(\'' . $id . '\').innerHTML="'
         . ( $modal ? "<input type='hidden' name='mode' id='mode' value='" . $id . "'>" : "" ) . $result
         . '<a href=\'javascript:revert_' . $id . '()\'>' . $cancel . '</a>' . ( $action != "" ? " or " : "" ) 
	 . ( $action != "press enter" ? "<a href='javascript:document.forms." . $form . ".submit();'>" . $action . "</a>" : $action ) . '"; } '
	 . ' function revert_' . $id . '() { document.getElementById(\'' . $id . '\').innerHTML="<a href=\'javascript:' . $id . '()\' title=\'' . $title . '\'>'
	 . $link . '</a>"; } </script>';
	     // write the actual div + originating link
      $output .= '<div id="' . $id . '"><a href="javascript:' . $id . '()" target="_self" title=\'' . $title . '\'>' . $link . '</a></div>';
      return $output;
   }
}
}

/* updater() - establishes updatable visual area updated by a stacked, delayed javascript that calls $php
 * type: the type of the element to be here created/updated
 * php: the php to spit through ajax, automatically negotiated through a <?php ?> block, use \" instead of "
 * delay: the delay (millis)
 */
if(!function_exists('updater'))
{   
  function updater( $page, $php, $delay, $type='div' ) {
	$domid=unique_jsid();
	$updater=unique_ajid();
    $page->append_body( '<'.$type.' id="' . $domid . '"></' . $div .'>' );
    $page->append_head(
	'<script language="javascript" type="text/javascript">  function updater_' . $updater 
      . "() { setTimeout('delayer()', '" . $delay . "'"
      . ');  getElementById(\'' . $domid . '\').innerHTML = "<?php ' . $php . ' ?>";  } updater_' . $updater . '(); </script>' );
    $page->append_onload( "updater_" . $updater . "();" );
  }
}

// Scriptaculous and Prototype and JQuery, capish?


    // jquery initialization, call only once.
    // call as init_jquery("latest"); for linked version
    // call as init_jquery("1.3.1"); for specified version
    // when called as init_jquery();, defaults to 1.3.1
if(!function_exists('init_jquery'))
{
    function init_jquery( $version="latest" ) {
        if ( $version == "latest" ) 
	return '<script type="text/javascript" src="http://code.jquery.com/jquery-latest.pack.js"></script>';
	else return '<script src="' . base_url() . 'Scripts/jquery-' . $version . '.min.js" type="text/javascript"></script>';
    }
}

// Start SCRIPTACULOUS section
if ( !function_exists('use_scriptaculous') )
{
    function use_scriptaculous( ) {
      echo '<script src="scriptaculous/prototype.js" type="text/javascript"></script>';
      echo '<script src="scriptaculous/scriptaculous.js" type="text/javascript"></script>';
    }
}
    
    // Calls a scriptaculous script on an element
if ( !function_exists('ele') )
{    
    function ele( $element, $functionname ) {
       echo '  // <![CDATA[';
       echo "              $('" . $element . "')." . $functionname . ";";
       echo "'  // ]]>";
       echo '</script>';
    }
}
    
    // Creates a draggable interface element
    // Options:   revert: true     - makes the element return to its origin
    //            handle: "string" - if set by a referenced embedded handle
    //            snap: [x,y]      - creates a snapable grid
    //            zindex: value    - sets the css z-index value (defaults 1000)
    //            constraint: 'horizontal' (default) or 'vertical'
    //            ghosting: true   - creates a clone when dragged
    //            starteffect: effect   - change drag effect default opaque
    //            reverteffect: effect  - change revert effect default move
    //            endeffect: effect     - change drop effect default opaque
    //
    //            onStart (callback)
    //            onDrag (callback)
    //            change (callback)
    //            onEnd (callback)
    // NOTE: No nested draggables.
if ( !function_exists('draggable') )
{    
    function draggable( $id, $options ) {
             echo '  <script type="text/javascript"> ';
             echo "     new Draggable('" . $id . "', { "
                  . $options . " });  </script> ";
    }
}

    // Creates a droppable interface element (a target region)
    // Options:   accept: 'id'     - String or string array of CSS classes
    //            containment: 'id'- String or string array of elements
    //            hoverclass: 'id' - Single CSS displayed when hovering
    //            overlap: value   - if set to 'horizontal' or vertical',
    //                               will only react to a Draggable if it
    //                               is overlapping by more than 50% in
    //                               the given direction (Used by Sortables)
    //            greedy: true     - stops processing hovering
    //
    //            onHover (callback)
    //            onDrop (callback)
if ( !function_exists('droppable') )
{
    function droppable( $id, $options ) {
             echo '  <script type="text/javascript"> ';
             echo "     Droppables.add('" . $id . "', { " . $options . " });  </script> ";
    }
}

if ( !function_exists('effect') )
{
    function effect( $name, $options="" ) {
        echo '<script> ';
        echo "new Effect.Opacity('" . $name . "', {" . $options . "}); ";
        echo '</script> ';
    }
}


/*
 * Functions by Maurice Rickard
 */
if ( !function_exists('ajax_xml_sanitize') )
{
  function ajax_xml_sanitize($txt)  { 
	$find = array('<','>');
	$repl = array('&lt;','&gt;');
	$txt = str_replace($find,$repl,$txt);
	return $txt;

  }
}


if ( !function_exists('xmlCleaner') )
{
  function xml_to_html_code($input) {
	
	$entities = array('& ', '&nbsp;','&iexcl;','&cent;','&pound;','&curren;','&yen;','&brvbar;','&sect;','&uml;','&copy;','&ordf;','&laquo;','&not;','&shy;','&reg;','&macr;','&deg;','&plusmn;','&sup2;','&sup3;','&acute;','&micro;','&para;','&middot;','&cedil;','&sup1;','&ordm;','&raquo;','&frac14;','&frac12;','&frac34;','&iquest;','&Agrave;','&Aacute;','&Acirc;','&Atilde;','&Auml;','&Aring;','&AElig;','&Ccedil;','&Egrave;','&Eacute;','&Ecirc;','&Euml;','&Igrave;','&Iacute;','&Icirc;','&Iuml;','&ETH;','&Ntilde;','&Ograve;','&Oacute;','&Ocirc;','&Otilde;','&Ouml;','&times;','&Oslash;','&Ugrave;','&Uacute;','&Ucirc;','&Uuml;','&Yacute;','&THORN;','&szlig;','&agrave;','&aacute;','&acirc;','&atilde;','&auml;','&aring;','&aelig;','&ccedil;','&egrave;','&eacute;','&ecirc;','&euml;','&igrave;','&iacute;','&icirc;','&iuml;','&eth;','&ntilde;','&ograve;','&oacute;','&ocirc;','&otilde;','&ouml;','&divide;','&oslash;','&ugrave;','&uacute;','&ucirc;','&uuml;','&yacute;','&thorn;','&yuml;');
	$entity_replacements = array('&amp; ', '&#160;','&#161;','&#162;','&#163;','&#164;','&#165;','&#166;','&#167;','&#168;','&#169;','&#170;','&#171;','&#172;','&#173;','&#174;','&#175;','&#176;','&#177;','&#178;','&#179;','&#180;','&#181;','&#182;','&#183;','&#184;','&#185;','&#186;','&#187;','&#188;','&#189;','&#190;','&#191;','&#192;','&#193;','&#194;','&#195;','&#196;','&#197;','&#198;','&#199;','&#200;','&#201;','&#202;','&#203;','&#204;','&#205;','&#206;','&#207;','&#208;','&#209;','&#210;','&#211;','&#212;','&#213;','&#214;','&#215;','&#216;','&#217;','&#218;','&#219;','&#220;','&#221;','&#222;','&#223;','&#224;','&#225;','&#226;','&#227;','&#228;','&#229;','&#230;','&#231;','&#232;','&#233;','&#234;','&#235;','&#236;','&#237;','&#238;','&#239;','&#240;','&#241;','&#242;','&#243;','&#244;','&#245;','&#246;','&#247;','&#248;','&#249;','&#250;','&#251;','&#252;','&#253;','&#254;','&#255;');

	$output = str_replace($entities, $entity_replacements, $input);
	
	return $output;
  }
}

if ( !function_exists('ajax_xml_sanitize') )
{
  function full_xml_sanitize($input) {
	
	$output = xmlCleaner($input);
	$output = ajax_xml_sanitize($output);

	return $output;
  }
}

/* End of file ajax_helper.php */
/* Location: ./system/helpers/ajax_helper.php */